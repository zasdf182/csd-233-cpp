#ifndef PROGRAM_BUILDMAZE
#define PROGRAM_BUILDMAZE
#include <set>
#include <cstdlib>
#include "types/subprogram.hpp"
#include "../modules/draw/types/shapes.hpp"
namespace Main {
namespace BuildMaze {








////////////////////////////////////////////////////////////////////////////////
/// @brief Marks top left as visited. Removes it's left wall. Adds it to queue.
///        Removes right wall of bottom right.
/// @note Executed once at start.
/// @note Next: SelectQueueBack().
////////////////////////////////////////////////////////////////////////////////
ExitCode BeginMaze(Context* context);








////////////////////////////////////////////////////////////////////////////////
/// @brief Selects back of queue. Pauses window.
/// @note Next: ResetContext().
////////////////////////////////////////////////////////////////////////////////
ExitCode SelectQueueBack(Context* context);

////////////////////////////////////////////////////////////////////////////////
/// @brief Selects front of queue. Pauses window.
/// @note Next: ResetContext().
////////////////////////////////////////////////////////////////////////////////
ExitCode SelectQueueFront(Context* context);

////////////////////////////////////////////////////////////////////////////////
/// @brief Resets loop variables.
/// @note Next: ChooseRandomNeighbor().
////////////////////////////////////////////////////////////////////////////////
ExitCode ResetContext(Context* context);








////////////////////////////////////////////////////////////////////////////////
/// @brief Chooses random unchosen neighbor of selected square.
/// @note Next: CheckNeighborBounds().
/// @note Next: PopQueue() if all sides already chosen.
////////////////////////////////////////////////////////////////////////////////
ExitCode ChooseRandomNeighbor(Context* context);

////////////////////////////////////////////////////////////////////////////////
/// @brief Checks if chosen neighbor out of bounds.
/// @note Next: CheckNeighborVisited().
/// @note Back: ChooseRandomNeighbor() if check fails.
////////////////////////////////////////////////////////////////////////////////
ExitCode CheckNeighborBounds(Context* context);

////////////////////////////////////////////////////////////////////////////////
/// @brief Checks if chosen neighbor already visited.
/// @note Next: RemoveNeighborWall().
/// @note Back: ChooseRandomNeighbor() if check fails.
////////////////////////////////////////////////////////////////////////////////
ExitCode CheckNeighborVisited(Context* context);

////////////////////////////////////////////////////////////////////////////////
/// @brief Erases wall to neighbor. Marks it visited.
/// @note Next: PushQueue().
////////////////////////////////////////////////////////////////////////////////
ExitCode RemoveNeighborWall(Context* context);








////////////////////////////////////////////////////////////////////////////////
/// @brief Pauses window. Adds chosen neighbor to back of queue.
/// @note Next: SelectQueueBack().
////////////////////////////////////////////////////////////////////////////////
ExitCode PushQueue(Context* context);

////////////////////////////////////////////////////////////////////////////////
/// @brief Pauses window. Removes selected square from back of queue.
///        Selected square could be at front or back.
/// @note Next: SelectQueueFront().
////////////////////////////////////////////////////////////////////////////////
ExitCode PopQueue(Context* context);
}
}
#endif
